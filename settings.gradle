import java.util.function.Function
import java.util.function.Predicate
import java.util.stream.Collectors

pluginManagement {
  repositories {
    gradlePluginPortal()
    maven { url 'https://repo.spring.io/plugins-release' }
  }
  /* 插件版本管理 */
  plugins {
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'org.springframework.boot' version '2.4.0'
  }
}

rootProject.name = 'tvoc-boot'

/* 引入子模块 */

FileTree buildFiles = fileTree(rootDir) {
  include '**/*.gradle'
  exclude 'build/', 'buildSrc', '**/gradle/', 'settings.gradle', 'build.gradle', '.*', 'out'
}

/* 自动引入模块 */
buildFiles.files.stream()
        .map(new Function<File, String>() {
          @Override
          String apply(File file) {
            return rootDir.relativePath(file.parentFile).replace("/", ":")
          }
        })
        .filter(new Predicate<String>() {
          @Override
          boolean test(String name) {
            return ["spring-boot-starter-dingtalk"].stream().anyMatch(new Predicate<String>() {
              @Override
              boolean test(String s) {
                return s != name
              }
            })
          }
        })
        .collect(Collectors.toSet())
        .each { name ->
          include "${name}"
        }
